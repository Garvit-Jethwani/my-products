# ********RoostGPT********

# Test generated by RoostGPT for test karate-test-credential using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /me_patch for http method type PATCH 
# RoostTestHash=6dd436357d
# 
# 

# ********RoostGPT********
Feature: Account API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
  * headers { Token: '#(AUTH_TOKEN)' }

Scenario: Change account settings successfully
  Given path '/me'
  And request
    """
    {
      "name": "John Doe",
      "image": "data:image/jpeg;base64,<clipped>",
      "settings": {
        "notificationEnabled": true
      }
    }
    """
  When method PUT
  Then status 200
  And match response ==
    """
    {
      "id": "#uuid",
      "did": "##string",
      "name": "John Doe",
      "image": "#regex ^\\w+:(\\/?\\/?)[^\\s]+$",
      "email": "#regex ^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$",
      "settings": {
        "notificationEnabled": true
      },
      "createdAt": "#regex ^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$",
      "updatedAt": "#regex ^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$"
    }
    """
  And match header api-version == '1.0.0'

Scenario: Change account settings with invalid request body
  Given path '/me'
  And request
    """
    {
      "name": "",
      "image": "invalid-url",
      "settings": {
        "notificationEnabled": "invalid-value"
      }
    }
    """
  When method PUT
  Then status 400
  And match response ==
    """
    {
      "error": "#regex ^validation/.*$",
      "description": "#string",
      "value": "#present",
      "field": "#string",
      "schema_field": "#string"
    }
    """
  And match header api-version == '1.0.0'

Scenario: Change account settings without authentication
  Given path '/me'
  And request
    """
    {
      "name": "John Doe",
      "image": "data:image/jpeg;base64,<clipped>",
      "settings": {
        "notificationEnabled": true
      }
    }
    """
  And headers { Token: '' }
  When method PUT
  Then status 401
  And match response ==
    """
    {
      "error": "#string",
      "description": "#string"
    }
    """
  And match header api-version == '1.0.0'
