# ********RoostGPT********

# Test generated by RoostGPT for test karate-test using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /employees_get for http method type GET 
# RoostTestHash=ec231a756b
# 
# 

# ********RoostGPT********
Feature: Employee Search API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase
  * def authToken = karate.properties['AUTH_TOKEN']

Scenario: Search employees with valid search string
  Given path '/employees'
  And param searchString = 'John'
  And header Authorization = authToken
  When method GET
  Then status 200
  And match response == '#[_ > 0]'
  And match each response contains
    """
    {
      email: '#string',
      jobTitle: '#string',
      name: '#string'
    }
    """
  And match response[0].id == '#uuid'

Scenario: Search employees without search string
  Given path '/employees'
  And header Authorization = authToken
  When method GET
  Then status 200
  And match response == '#[_ > 0]'
  And match each response contains
    """
    {
      email: '#string',
      jobTitle: '#string',
      name: '#string'
    }
    """

Scenario: Search employees with non-existent search string
  Given path '/employees'
  And param searchString = 'NonExistentEmployee'
  And header Authorization = authToken
  When method GET
  Then status 200
  And match response == '#[0]'

Scenario: Search employees with invalid search string
  Given path '/employees'
  And param searchString = '123'
  And header Authorization = authToken
  When method GET
  Then status 400
  And match response.description contains 'Bad input'
