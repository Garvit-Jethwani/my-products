# ********RoostGPT********

# Test generated by RoostGPT for test karate-test-credential using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /login_post for http method type POST 
# RoostTestHash=3122292ee3
# 
# 

# ********RoostGPT********
Feature: Login API

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase
* def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
* configure headers = { 'Content-Type': 'application/json' }

Scenario Outline: Login using OTP - successful
    Given path '/login'
    And request
    """
    {
        "email": "<email>",
        "otp": "<otp>",
        "client": "<client>"
    }
    """
    When method POST
    Then status 201
    And match header api-version == '1.0.0'
    And match response.token == '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'

    Examples:
    | email              | otp    | client  |
    | test@example.com   | 123456 | mobile  |
    | user@example.com   | 654321 | web     |
    | admin@example.com  | 111111 | desktop |
    | api@example.com    | 999999 | api     |

Scenario Outline: Login using OTP - Bad Request (400)
    Given path '/login'
    And request
    """
    {
        "email": "<email>",
        "otp": "<otp>",
        "client": "<client>"
    }
    """
    When method POST
    Then status 400
    And match header api-version == '1.0.0'
    And match response.error == '#regex ^(error/code|validation/.*)$'
    And match response.description == '#string'
    And if (response.error.startsWith('validation/')) karate.call('validateSchema', response)

    Examples:
    | email           | otp    | client   |
    | invalid.email   | 123456 | mobile   |
    | test@example    | abc    | web      |
    |                 | 111111 | desktop  |
    | api@example.com |        | invalid  |

@ignore @validateSchema
Scenario: validates schema errors
    * match response.value == '#present'
    * match response.field == '#string'
    * match response.schema_field == '#string'
