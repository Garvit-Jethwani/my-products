# ********RoostGPT********

# Test generated by RoostGPT for test karate-test-credential using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /login_post for http method type POST 
# RoostTestHash=3122292ee3
# 
# 

# ********RoostGPT********
Feature: Login using OTP

Background:
* def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
* url urlBase
* def authToken = karate.properties['AUTH_TOKEN']
* configure headers = { 'Token': '#(authToken)' }

Scenario Outline: Login with valid credentials
    Given path '/login'
    And request
    """
    {
      "email": "<email>",
      "otp": "<otp>",
      "client": "<client>"
    }
    """
    When method POST
    Then status 201
    And match header api-version == '1.0.0'
    And match response.token == '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$'

    Examples:
      | email              | otp    | client  |
      | john@example.com   | 123456 | mobile  |
      | jane@example.com   | 654321 | web     |
      | bob@example.com    | 111111 | desktop |
      | alice@example.com  | 999999 | api     |

Scenario: Login with invalid email format
    Given path '/login' 
    And request
    """
    {
      "email": "invalid.email",
      "otp": "123456",
      "client": "mobile"
    }
    """
    When method POST
    Then status 400
    And match header api-version == '1.0.0'
    And match response == 
    """
    {
      "error": "#regex ^validation/.*$",
      "description": "#string",
      "value": "#present",
      "field": "#present",
      "schema_field": "#present"
    }
    """
    And match response.error == 'validation/email-pattern'

Scenario: Login with missing required fields
    Given path '/login'
    And request
    """
    {
      "email": "john@example.com"
    }
    """
    When method POST
    Then status 400 
    And match header api-version == '1.0.0'
    And match response ==
    """
    {
      "error": "#string",
      "description": "#string"
    }
    """
