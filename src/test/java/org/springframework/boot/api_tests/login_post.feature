# ********RoostGPT********

# Test generated by RoostGPT for test karate-test-credential using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /login_post for http method type POST 
# RoostTestHash=3122292ee3
# 
# 

# ********RoostGPT********
Feature: Login API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario: Login using OTP successfully
  * def requestBody = { "email": "test@example.com", "otp": "123456", "client": "web" }
  Given path '/login'
  And request requestBody
  When method POST
  Then status 201
  And match header api-version == '1.0.0'
  And match response == { token: '#regex ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$' }

Scenario: Login with invalid email format
  * def requestBody = { "email": "invalid_email", "otp": "123456", "client": "web" }
  Given path '/login'
  And request requestBody
  When method POST
  Then status 400
  And match header api-version == '1.0.0'
  And match response == { error: 'validation/email-pattern', description: 'Descriptive Error Message', value: '#(requestBody.email)', field: 'email', schema_field: 'email' }

Scenario: Login with missing required fields
  * def requestBody = { "email": "test@example.com" }
  Given path '/login'
  And request requestBody
  When method POST
  Then status 400
  And match header api-version == '1.0.0'
  And match response == { error: 'error/code', description: 'Descriptive Error Message' }

Scenario: Login with invalid client type
  * def requestBody = { "email": "test@example.com", "otp": "123456", "client": "invalid" }
  Given path '/login'
  And request requestBody
  When method POST
  Then status 400
  And match header api-version == '1.0.0'
  And match response == { error: 'validation/client-enum', description: 'Descriptive Error Message', value: '#(requestBody.client)', field: 'client', schema_field: 'client' }
